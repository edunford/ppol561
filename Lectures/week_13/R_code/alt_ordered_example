
## Example

Consider the following data from a Copenhagen Housing Conditions Survey:^[This is the example data that comes when loading the `MASS` package. If you have any questions about this model, run `?housing` after loading the `MASS` packages.]

- `Sat`: Satisfaction of householders with their present housing circumstances, (High, Medium or Low, ordered factor).
- `Infl`: Perceived degree of influence householders have on the management of the property (High, Medium, Low).
- `Type`: Type of rental accommodation, (Tower, Atrium, Apartment, Terrace).
- `Cont`: Contact residents are afforded with other residents, (Low, High).
- `Freq`: the numbers of residents in each class.

The dependent variable is statisfaction of householders (`Sat`). Like the illustration above, there are three categories. Our key explanatory variable is precieved influence (`Infl`). The hypothesis being: if a householder has more capacity to change problems and/or issues they face, the more satisfied they'll be. Note that `Infl` is also a ordered variable and `Low` is going to be the baseline. Our expectation is that we should observe a postive effect of influence on satisfaction.

```{r}

housing$Infl = as.numeric(housing$Infl) - 1 # categorical to ordered
summary(housing)
```

We can estimated the model using the `polr` function from the `MASS` package.

```{r}
house.plr <- polr(Sat ~ Infl + Type + Cont, # Model
                  weights = Freq, # weight for response across categories
                  method = "probit", # Probit model
                  Hess = T, # returns the hessian matrix
                  data = housing)
summary(house.plr,digits = 2)
```

Note that the model estimates two cut points, if we think of $\tau_1$ as `Low|Medium` and $\tau_2$ as `Medium|High`, we can see direct parallels with the above figure. 

We interpret the model as we did with the binary response. That is, they are changes in the odds. We can't say much about the marginal effect of our `Infl` variable. We can only talk about the general direction of the coefficients and whether they are statistically significant. He we can see the coefficients on `Infl` move in the right direction.

### Calculating Predicted Probabilities `Infl` on `sat`

The let's calculate the predicted level of satisfaction given the level influence one has. To do this, we'll need to manipulate the `Infl` variable and calculate the predicted probabilities across each cutpoint. 

First, let's extract the coefficients and the cut points

```{r}
B = house.plr$coefficients
B
```

```{r}
cuts = house.plr$zeta
cuts
```


Second, let's extract the model matrix (i.e. the data we used to run the model with).
```{r}
X = model.matrix(house.plr)[,-1] # drop intercept
head(X)
```

Third, maniputate the value of `Infl` to be low (`Infl = 0`) and hold all other variables at their **observed values**.

```{r}
X[,2] = 0
```

Fourth, calculate the predicted probabilities for each observation as each cut point
```{r}
pr_low = pnorm(cuts[1] - X%*%B) 
pr_med = pnorm(cuts[2] - X%*%B) - pnorm(cuts[1] - X%*%B)
pr_high = 1 - pnorm(cuts[2] - X%*%B)
```

Fifth, calculate the expect (average) probability by taking the mean, and then present as a table.
```{r}
predicted_probs <-
  tibble(response = c("Low Satisfaction","Med. Satisfaction","High Satisfaction"),
         Infl = "Low",
         prob = c(mean(pr_low),
                  mean(pr_med),
                  mean(pr_high)))
predicted_probs
```


Let's write some code to walk through each step for the other manipulations of the `Infl` variable.  

```{r}
infl_vals = c("Medium","High")
for(i in c(1,2)){
  X[,2] = i
  pr_low = pnorm(cuts[1] - X%*%B) 
  pr_med = pnorm(cuts[2] - X%*%B) - pnorm(cuts[1] - X%*%B)
  pr_high = 1 - pnorm(cuts[2] - X%*%B)
  
  # Gather as a table.
  tmp <-
    tibble(response = c("Low Satisfaction","Med. Satisfaction","High Satisfaction"),
           Infl = infl_vals[i],
           prob = c(mean(pr_low),
                    mean(pr_med),
                    mean(pr_high)))
  
  # Bind to existing
  predicted_probs <- bind_rows(predicted_probs,tmp)
}
```


Print Table.
```{r}
predicted_probs %>%
  mutate(prob = paste0(round(prob,3)*100,"%"),
         Infl = factor(Infl,levels=c("Low","Medium","High"))) %>% 
  arrange(Infl)
```

Conclusion: It looks like the opposite is true from what we hypothesized! Respondents were more likely to be highly satisfied when they had less influence, whereas respondents with more influence (medium/high) were less likely to be satisfied. It seems that one is more content with their circumstances if he or she lacks the power to change it. 


### Simulating Confidence Intervals

One issue with the above predictions is that we have no sense of how certain we are about these preditions. As we did with binary response models, we can estimated our uncertainty around our predictions via monte carlo simulation.

First, we need to extract the coefficients and the variance-covariance matrix.

```{r}
betas = c(house.plr$coefficients, # coefficients
          house.plr$zeta) # And cut points
vcov_mat = vcov(house.plr)
```

Second, we need to simulate a bunch of possible coefficient values using the mean and variance from the estimated model in a multivariate normal distribution.

```{r}
N_sims = 1000 # number of simulations
sim_betas <-
  mvrnorm(n = N_sims,
          mu = betas, # mean values of the coefficients 
          Sigma = vcov_mat) # Variance of the coefficients
```



Third, calculate all possible combinations of each simulation and record the average. 

```{r,eval=F}
output = c()
for(i in c(0,1,2)){
  for(B in sim_betas){
    X[,2] = i
    pr_low = pnorm(cuts[1] - X%*%B) 
    pr_med = pnorm(cuts[2] - X%*%B) - pnorm(cuts[1] - X%*%B)
    pr_high = 1 - pnorm(cuts[2] - X%*%B)
    
    tmp = tibble(x = i,pr_low,pr_med,pr_high)
    output =
  }
}
```



Below I'll use the `obsval` package to calculate the 95% confidence interval around the predicted effects.

```{r,eval=F}
require(obsval)
mod2 <- 
  obsval(Sat ~ Infl + Type + Cont,
         data = housing,
         ci = .95,
         n.draws = 1000,
         reg.model = "oprobit",
         effect.var = "Infl",
         effect.vals = c(0,1,2))
summary(mod2$model)
```











